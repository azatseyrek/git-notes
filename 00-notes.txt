Git Notes
***
##Terimler:

-staging area: git add yaptigimizda ekledigimiz alana staging area denir.

-working directory: yazdığınız kodun git add . yapılmamış hali yani yazdığınız ancak henüz staging area'ya eklenmemiş olan kodun durumunu ifade eder.

# git reset & git revert
1) reset & revert -> reset ve revert arasindaki fark nedir?
reset -> commitleri siler geri alinan duruma gecildiginda
revert -> commitleri silmez.

2) reset --hard nedir? ?

Diyelimki biz bir degisiklik yaptik. Bu degisklikte bir kac satir birseyler ekledik kodumuza. bunuda git add ve git commitle ekledik gite. Bu durumda bizim commitlerimiz arasinda artik yaptigimiz son degisiklik gorunuyor.

istenilen durum:

Yaptigimiz degisikligi geri almak istiyoruz ve ayni zamanda commitleride historyden kaldirmak istiyoruz. o zaman kullanacagimiz komut  ---git reset---- 

git reset --hard
peki nedir bu hard olayi: iste olay burada basliyor. reset --hard yaptigimizda historyden commit silinir ayni zamanda yazdigimiz bir kac satir kodda working directoryden kaldirilir. 

git reset
Sadece git reset yazip --hard flagi koymazsak bu durumda historyden commit silinir ama yaptigimiz degisklik working directory gorunur.

git reset --soft
soft reset yapildiginda yapilan degisklik staged aread kalir yani committen hemen onceki tum islemler gecerlidir.

OZET:
------> Diyelimki bir degisklik yaptik ve bunu git add  ile staged areaya ekledik sonrada commitledik. Artik git historymizde gorunuyor. Sonra dedik ki bunu geri alalim. Burda 4 senaryo var.
        1. revert kullanmak. revert kullanirsak herseyi geri alir ancak historyde kalmaya devam eder bu sayede istenildiginde historyden ulasilabilinir.
        2. reset kullanmak.
            burda bize gerekli olan senaryoyu belirlemeliyiz.
            ** git reset --> eger yaptigimiz degisiklikler working directoryde kalsin ancak staged areadn da silinsin istersek kullanabiliriz.
            ** git reset --soft --> eger yaptigimiz degisklik historyden gitsin ancak working directoryde ve staged areda kalisin istiyrosak --soft kuyllanabiliriz.
            ** git reset --hard --> historyden staged areadan ve working directoryden silmek istiyorusak --hard kullaniriz


# merge cesitleri
-->Fastforward ve Nonfast Forward olmak uzere iki cesittir. Bizim kullandigimiz genelde fast-forward merge oluyor. Yani diyelimki bir master branchimiz var. Biz bir dev branchi actik masterdan. devde degisiklikleri yaptik commitledik. daha sonra mastera gittigimizde git merge dev dedigimizde fast-forward seklinde merge islemi yapar. Burdaki asil mesele merge isleminden sonra  dev branchinin commitleride  mastera eklenir. Bu durumu istemiyorsakta git merge --squash dev yada nonfastforward merge (recursive merge) kullanabiliriz

**git merge --squash dev kullanimi: bu sekilde merge yaparsak en son bir commit daha atmamiz gerekli olur. Buda genelde dev merged to master gibi birseyler oluyor. Yani squash ile merge islemi yaparsa devdeki commitler yerine bizim en son atacagimiz commitler gorunecektir.


**git merge --no-ff dev kullanimi. Burada devdeki commitlerde gelir. Ancak sadece git merge dev deki gibi degil merge edildigine dair bir commit messagida eklenir. 

!!Onemli Not: Diyelimki masterdan bir dev branchi ciktik. devde birseyler commitledik. sonra masterdada dev de yaptigimiz degisklikleri etkilemeyen bir seyleri degistidik( dosya eklemek gibi). Burda yapacagimiz normal merge islemi yani mastera gecip yapilan git merge dev islemi otomatikmen non fast forward (recursive) olarak mergelenir. 
